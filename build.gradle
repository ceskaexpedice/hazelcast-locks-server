plugins {
    id 'java-library' // Applies the Java plugin
    id 'maven-publish'
    id 'application'
}

application {
    mainClass.set("org.ceskaexpedice.hazelcast.HazelcastServerNodeStarter")
}


publishing {

    publications {
        myLibrary(MavenPublication) {
            from components.java
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/ceskaexpedice/hazelcast-locks-server"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://maven.java.net/content/repositories/snapshots/"
    }
    maven {
        url "https://repository.springsource.com/maven/bundles/external"
    }
    maven {
        url "https://repository.jboss.org/nexus/content/repositories/thirdparty-releases"
    }
    maven {
        url "https://download.osgeo.org/webdav/geotools/"
    }
    maven {
        url 'https://github.com/psiegman/mvn-repo/raw/master/releases'
    }
    maven {
        url "https://jbig2-imageio.googlecode.com/svn/maven-repository"
    }
    maven {
        url "https://jbig2-imageio.googlecode.com/svn/maven-repository"
    }
    maven {
        url "https://jitpack.io"
    }
}

dependencies {
    api 'com.hazelcast:hazelcast-all:3.11.2'
    implementation 'net.jcip:jcip-annotations:1.0'

    // test
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0' // Replace with your test dependency
    testImplementation 'org.mockito:mockito-core:5.14.2'
    testImplementation 'org.mockito:mockito-inline:5.2.0'

}

test {
    useJUnitPlatform() // Configures the test task to use JUnit 5
    //forkEvery = 1
}

build.doLast {
    println "Build outputs located in ${project.buildDir}"
}
/*
task createManifest {
    doLast {
        jar {
            manifest {
                attributes(
                        'Main-Class': 'org.ceskaexpedice.hazelcast.HazelcastServerNodeStarter',
                        'Class-Path': configurations.runtimeClasspath.files.collect { "libs/${it.name}" }.join(' ')
                )
            }
        }
    }
}

jar {
    dependsOn createManifest
}

 */